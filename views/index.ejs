<!DOCTYPE html>
<html lang="fr">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title><%= title %></title>
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css"
      rel="stylesheet"
    />
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.0/font/bootstrap-icons.css"
    />
    <style>
      .playlist-card {
        transition: all 0.3s ease;
      }
      .playlist-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
      }
      .sidebar {
        height: calc(100vh - 56px);
        overflow-y: auto;
      }
      .track-list {
        max-height: 600px;
        overflow-y: auto;
      }
      .loading {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        z-index: 1000;
        display: flex;
        justify-content: center;
        align-items: center;
        color: white;
      }
      .track-item {
        cursor: pointer;
      }
      .track-item:hover {
        background-color: #f8f9fa;
      }
      .template-item {
        margin-bottom: 15px;
        padding: 10px;
        border: 1px solid #dee2e6;
        border-radius: 5px;
      }
      .rule-item {
        margin: 5px 0;
        padding: 5px;
        background-color: #f8f9fa;
        border-radius: 3px;
      }
    </style>
  </head>
  <body>
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
      <div class="container-fluid">
        <a class="navbar-brand" href="#">
          <i class="bi bi-music-note-list"></i> Smart Playlist Generator
        </a>
        <button
          class="navbar-toggler"
          type="button"
          data-bs-toggle="collapse"
          data-bs-target="#navbarNav"
        >
          <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarNav">
          <ul class="navbar-nav">
            <li class="nav-item">
              <a class="nav-link" href="#" id="scanLibrary">
                <i class="bi bi-search"></i> Scanner la bibliothèque
              </a>
            </li>
            <li class="nav-item">
              <a class="nav-link" href="#" id="generatePlaylists">
                <i class="bi bi-gear"></i> Générer les playlists
              </a>
            </li>
            <li class="nav-item">
              <a class="nav-link" href="#" id="savePlaylists">
                <i class="bi bi-save"></i> Sauvegarder
              </a>
            </li>
            <li class="nav-item">
              <a class="nav-link" href="#" id="loadPlaylists">
                <i class="bi bi-folder-open"></i> Charger
              </a>
            </li>
            <li class="nav-item">
              <a
                class="nav-link"
                href="#"
                data-bs-toggle="modal"
                data-bs-target="#optionsModal"
              >
                <i class="bi bi-sliders"></i> Options
              </a>
            </li>
            <li class="nav-item">
              <a
                class="nav-link"
                href="#"
                data-bs-toggle="modal"
                data-bs-target="#templateModal"
              >
                <i class="bi bi-plus-circle"></i> Ajouter un modèle
              </a>
            </li>
          </ul>
          <span class="navbar-text ms-auto" id="statsText">
            <!-- Les statistiques apparaîtront ici -->
          </span>
        </div>
      </div>
    </nav>

    <div class="container-fluid">
      <div class="row">
        <div class="col-md-3 bg-light sidebar p-3" id="playlistSidebar">
          <h5><i class="bi bi-list-ul"></i> Playlists</h5>
          <div class="list-group mt-3" id="playlistsList">
            <!-- Les playlists apparaîtront ici -->
            <div class="text-center text-muted">
              <p>Aucune playlist disponible</p>
              <p>Commencez par scanner votre bibliothèque</p>
            </div>
          </div>
        </div>
        <div class="col-md-9 p-4">
          <div class="alert alert-info" id="welcomeMessage">
            <h4>
              <i class="bi bi-info-circle"></i> Bienvenue dans le générateur de
              playlists intelligentes
            </h4>
            <p>
              Cet outil vous permet de créer automatiquement des playlists
              basées sur votre bibliothèque musicale. Commencez par scanner
              votre bibliothèque pour découvrir votre collection, puis générez
              des playlists intelligentes qui regroupent vos artistes selon
              différents critères.
            </p>
            <ul>
              <li><strong>Dossier de musique :</strong> <%= musicDir %></li>
              <li><strong>Dossier de sortie :</strong> <%= playlistsDir %></li>
            </ul>
            <p>
              Pour commencer, cliquez sur "Scanner la bibliothèque" dans la
              barre de navigation.
            </p>
          </div>

          <div id="playlistContent" style="display: none">
            <div class="d-flex justify-content-between align-items-center mb-3">
              <h3 id="playlistTitle">Titre de la playlist</h3>
              <div class="btn-group">
                <button class="btn btn-outline-primary" id="editPlaylistBtn">
                  <i class="bi bi-pencil"></i> Modifier
                </button>
                <button class="btn btn-outline-danger" id="removePlaylistBtn">
                  <i class="bi bi-trash"></i> Supprimer
                </button>
              </div>
            </div>

            <p class="text-muted" id="playlistDescription">
              Description de la playlist
            </p>

            <div class="card mb-4">
              <div
                class="card-header d-flex justify-content-between align-items-center"
              >
                <h5 class="mb-0">
                  <i class="bi bi-music-note-list"></i> Morceaux
                  <span class="badge bg-primary ms-2" id="trackCount">0</span>
                </h5>
                <div class="input-group" style="max-width: 300px">
                  <span class="input-group-text"
                    ><i class="bi bi-search"></i
                  ></span>
                  <input
                    type="text"
                    class="form-control"
                    id="trackSearch"
                    placeholder="Rechercher..."
                  />
                </div>
              </div>
              <div class="card-body p-0">
                <div class="table-responsive track-list">
                  <table class="table table-hover table-striped">
                    <thead>
                      <tr>
                        <th scope="col">#</th>
                        <th scope="col">Titre</th>
                        <th scope="col">Artiste</th>
                        <th scope="col">Album</th>
                        <th scope="col">Genre</th>
                      </tr>
                    </thead>
                    <tbody id="tracksList">
                      <!-- Les pistes apparaîtront ici -->
                    </tbody>
                  </table>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Modal des options -->
    <div class="modal fade" id="optionsModal" tabindex="-1" aria-hidden="true">
      <div class="modal-dialog modal-lg">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title">Options de génération</h5>
            <button
              type="button"
              class="btn-close"
              data-bs-dismiss="modal"
              aria-label="Close"
            ></button>
          </div>
          <div class="modal-body">
            <form id="optionsForm">
              <div class="row">
                <div class="col-md-6">
                  <h6>Paramètres des playlists</h6>
                  <div class="mb-3">
                    <label class="form-label"
                      >Nombre minimum de morceaux par playlist</label
                    >
                    <input
                      type="number"
                      class="form-control"
                      name="minTracksPerPlaylist"
                      min="5"
                      max="100"
                      value="20"
                    />
                  </div>
                  <div class="mb-3">
                    <label class="form-label"
                      >Nombre maximum de morceaux par playlist</label
                    >
                    <input
                      type="number"
                      class="form-control"
                      name="maxTracksPerPlaylist"
                      min="10"
                      max="500"
                      value="50"
                    />
                  </div>
                  <div class="mb-3">
                    <label class="form-label"
                      >Maximum de morceaux par artiste dans une playlist</label
                    >
                    <input
                      type="number"
                      class="form-control"
                      name="maxTracksPerArtistInPlaylist"
                      min="1"
                      max="20"
                      value="4"
                    />
                  </div>
                  <div class="mb-3">
                    <label class="form-label"
                      >Nombre maximum de playlists à générer</label
                    >
                    <input
                      type="number"
                      class="form-control"
                      name="numberOfPlaylists"
                      min="1"
                      max="50"
                      value="10"
                    />
                  </div>
                </div>
                <div class="col-md-6">
                  <h6>Types de playlists</h6>
                  <div class="form-check form-switch mb-3">
                    <input
                      class="form-check-input"
                      type="checkbox"
                      name="generators.genres"
                      id="genresGenerator"
                      checked
                    />
                    <label class="form-check-label" for="genresGenerator"
                      >Playlists par genre</label
                    >
                  </div>
                  <div class="form-check form-switch mb-3">
                    <input
                      class="form-check-input"
                      type="checkbox"
                      name="generators.folders"
                      id="foldersGenerator"
                      checked
                    />
                    <label class="form-check-label" for="foldersGenerator"
                      >Playlists par dossier</label
                    >
                  </div>
                  <div class="form-check form-switch mb-3">
                    <input
                      class="form-check-input"
                      type="checkbox"
                      name="generators.recentlyAdded"
                      id="recentlyAddedGenerator"
                      checked
                    />
                    <label class="form-check-label" for="recentlyAddedGenerator"
                      >Playlists des ajouts récents</label
                    >
                  </div>
                  <div class="form-check form-switch mb-3">
                    <input
                      class="form-check-input"
                      type="checkbox"
                      name="generators.decades"
                      id="decadesGenerator"
                      checked
                    />
                    <label class="form-check-label" for="decadesGenerator"
                      >Playlists par décennie</label
                    >
                  </div>
                  <div class="form-check form-switch mb-3">
                    <input
                      class="form-check-input"
                      type="checkbox"
                      name="generators.smartMix"
                      id="smartMixGenerator"
                      checked
                    />
                    <label class="form-check-label" for="smartMixGenerator"
                      >Mix intelligents</label
                    >
                  </div>
                  <div class="form-check form-switch mb-3">
                    <input
                      class="form-check-input"
                      type="checkbox"
                      name="generators.coverage"
                      id="coverageGenerator"
                      checked
                    />
                    <label class="form-check-label" for="coverageGenerator"
                      >Playlists de couverture complète</label
                    >
                  </div>
                </div>
              </div>

              <hr />

              <h6>Facteurs de similarité pour les Mix intelligents</h6>
              <div class="row">
                <div class="col-md-4">
                  <label class="form-label">Genre musical</label>
                  <input
                    type="range"
                    class="form-range"
                    name="similarityFactors.genre"
                    min="0"
                    max="1"
                    step="0.1"
                    value="0.5"
                  />
                </div>
                <div class="col-md-4">
                  <label class="form-label">Emplacement dans le dossier</label>
                  <input
                    type="range"
                    class="form-range"
                    name="similarityFactors.folder"
                    min="0"
                    max="1"
                    step="0.1"
                    value="0.3"
                  />
                </div>
                <div class="col-md-4">
                  <label class="form-label">Similarité de nom d'artiste</label>
                  <input
                    type="range"
                    class="form-range"
                    name="similarityFactors.artistName"
                    min="0"
                    max="1"
                    step="0.1"
                    value="0.2"
                  />
                </div>
              </div>
            </form>
          </div>
          <div class="modal-footer">
            <button
              type="button"
              class="btn btn-secondary"
              data-bs-dismiss="modal"
            >
              Annuler
            </button>
            <button type="button" class="btn btn-primary" id="saveOptions">
              Enregistrer
            </button>
          </div>
        </div>
      </div>
    </div>

    <!-- Modal pour ajouter un modèle de playlist -->
    <div class="modal fade" id="templateModal" tabindex="-1" aria-hidden="true">
      <div class="modal-dialog modal-lg">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title">Ajouter un modèle de playlist</h5>
            <button
              type="button"
              class="btn-close"
              data-bs-dismiss="modal"
              aria-label="Close"
            ></button>
          </div>
          <div class="modal-body">
            <form id="templateForm">
              <div class="mb-3">
                <label class="form-label">Nom de la playlist</label>
                <input type="text" class="form-control" name="name" required />
              </div>
              <div class="mb-3">
                <label class="form-label">Description</label>
                <input type="text" class="form-control" name="description" />
              </div>

              <h6>Règles</h6>
              <div id="rulesList">
                <!-- Les règles apparaîtront ici -->
              </div>

              <div class="mb-3">
                <button
                  type="button"
                  class="btn btn-outline-primary"
                  id="addRuleBtn"
                >
                  <i class="bi bi-plus-circle"></i> Ajouter une règle
                </button>
              </div>
            </form>
          </div>
          <div class="modal-footer">
            <button
              type="button"
              class="btn btn-secondary"
              data-bs-dismiss="modal"
            >
              Annuler
            </button>
            <button type="button" class="btn btn-primary" id="saveTemplate">
              Enregistrer
            </button>
          </div>
        </div>
      </div>
    </div>

    <!-- Modal pour modifier une playlist -->
    <div
      class="modal fade"
      id="editPlaylistModal"
      tabindex="-1"
      aria-hidden="true"
    >
      <div class="modal-dialog">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title">Modifier la playlist</h5>
            <button
              type="button"
              class="btn-close"
              data-bs-dismiss="modal"
              aria-label="Close"
            ></button>
          </div>
          <div class="modal-body">
            <form id="editPlaylistForm">
              <div class="mb-3">
                <label class="form-label">Nom de la playlist</label>
                <input
                  type="text"
                  class="form-control"
                  name="name"
                  id="editPlaylistName"
                  required
                />
              </div>
              <div class="mb-3">
                <label class="form-label">Description</label>
                <input
                  type="text"
                  class="form-control"
                  name="description"
                  id="editPlaylistDescription"
                />
              </div>
            </form>
          </div>
          <div class="modal-footer">
            <button
              type="button"
              class="btn btn-secondary"
              data-bs-dismiss="modal"
            >
              Annuler
            </button>
            <button type="button" class="btn btn-primary" id="savePlaylistEdit">
              Enregistrer
            </button>
          </div>
        </div>
      </div>
    </div>

    <!-- Indicateur de chargement -->
    <div class="loading" id="loadingIndicator">
      <div
        class="spinner-border text-light"
        role="status"
        style="width: 3rem; height: 3rem"
      >
        <span class="visually-hidden">Chargement...</span>
      </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
      document.addEventListener("DOMContentLoaded", function () {
        // Éléments du DOM
        const loadingIndicator = document.getElementById("loadingIndicator");
        const statsText = document.getElementById("statsText");
        const playlistsList = document.getElementById("playlistsList");
        const welcomeMessage = document.getElementById("welcomeMessage");
        const playlistContent = document.getElementById("playlistContent");
        const playlistTitle = document.getElementById("playlistTitle");
        const playlistDescription = document.getElementById(
          "playlistDescription"
        );
        const tracksList = document.getElementById("tracksList");
        const trackCount = document.getElementById("trackCount");
        const scanLibraryBtn = document.getElementById("scanLibrary");
        const generatePlaylistsBtn =
          document.getElementById("generatePlaylists");
        const savePlaylistsBtn = document.getElementById("savePlaylists");
        const loadPlaylistsBtn = document.getElementById("loadPlaylists");
        const saveOptionsBtn = document.getElementById("saveOptions");
        const optionsForm = document.getElementById("optionsForm");
        const templateForm = document.getElementById("templateForm");
        const addRuleBtn = document.getElementById("addRuleBtn");
        const rulesList = document.getElementById("rulesList");
        const saveTemplateBtn = document.getElementById("saveTemplate");
        const editPlaylistBtn = document.getElementById("editPlaylistBtn");
        const removePlaylistBtn = document.getElementById("removePlaylistBtn");
        const editPlaylistForm = document.getElementById("editPlaylistForm");
        const editPlaylistName = document.getElementById("editPlaylistName");
        const editPlaylistDescription = document.getElementById(
          "editPlaylistDescription"
        );
        const savePlaylistEditBtn = document.getElementById("savePlaylistEdit");
        const trackSearch = document.getElementById("trackSearch");

        // État de l'application
        let currentState = {
          library: {
            scanned: false,
            tracks: 0,
            artists: 0,
            genres: 0,
          },
          playlists: [],
          currentPlaylistIndex: -1,
          genres: [],
          artists: [],
        };

        // Afficher/masquer l'indicateur de chargement
        function toggleLoading(show) {
          loadingIndicator.style.display = show ? "flex" : "none";
        }

        // Mettre à jour les statistiques
        function updateStats() {
          if (currentState.library.scanned) {
            statsText.innerHTML = `
            <i class="bi bi-music-note"></i> ${currentState.library.tracks} morceaux 
            <i class="bi bi-person"></i> ${currentState.library.artists} artistes 
            <i class="bi bi-tag"></i> ${currentState.library.genres} genres
          `;
          } else {
            statsText.textContent = "Bibliothèque non scannée";
          }
        }

        // Mettre à jour la liste des playlists
        function updatePlaylistsList() {
          if (currentState.playlists.length === 0) {
            playlistsList.innerHTML = `
            <div class="text-center text-muted">
              <p>Aucune playlist disponible</p>
              <p>Générez des playlists à partir de votre bibliothèque</p>
            </div>
          `;
            return;
          }

          playlistsList.innerHTML = "";
          currentState.playlists.forEach((playlist, index) => {
            const item = document.createElement("a");
            item.href = "#";
            item.className =
              "list-group-item list-group-item-action d-flex justify-content-between align-items-center";
            if (index === currentState.currentPlaylistIndex) {
              item.classList.add("active");
            }

            item.innerHTML = `
            <div>
              <div class="fw-bold">${playlist.name}</div>
              <small class="text-muted">${
                playlist.generatedBy || "custom"
              }</small>
            </div>
            <span class="badge bg-primary rounded-pill">${
              playlist.trackCount
            }</span>
          `;

            item.addEventListener("click", (e) => {
              e.preventDefault();
              loadPlaylist(index);
            });

            playlistsList.appendChild(item);
          });
        }

        // Charger les détails d'une playlist
        async function loadPlaylist(index) {
          if (index < 0 || index >= currentState.playlists.length) return;

          currentState.currentPlaylistIndex = index;
          updatePlaylistsList();

          try {
            toggleLoading(true);

            const response = await fetch(`/api/playlists/${index}`);
            const data = await response.json();

            if (data.success) {
              const playlist = data.playlist;

              // Masquer le message de bienvenue et afficher le contenu de la playlist
              welcomeMessage.style.display = "none";
              playlistContent.style.display = "block";

              // Mettre à jour les informations de la playlist
              playlistTitle.textContent = playlist.name;
              playlistDescription.textContent = playlist.description || "";
              trackCount.textContent = playlist.tracks.length;

              // Afficher la liste des pistes
              displayTracks(playlist.tracks);
            }
          } catch (error) {
            console.error("Error loading playlist:", error);
            alert("Erreur lors du chargement de la playlist");
          } finally {
            toggleLoading(false);
          }
        }

        // Afficher la liste des pistes
        function displayTracks(tracks) {
          tracksList.innerHTML = "";

          tracks.forEach((track, index) => {
            const row = document.createElement("tr");
            row.className = "track-item";

            row.innerHTML = `
            <td>${index + 1}</td>
            <td>${track.title}</td>
            <td>${track.artist}</td>
            <td>${track.album || ""}</td>
            <td>${
              Array.isArray(track.genres) ? track.genres.join(", ") : ""
            }</td>
          `;

            tracksList.appendChild(row);
          });
        }

        // Filtrer les pistes
        function filterTracks() {
          const query = trackSearch.value.toLowerCase();
          const rows = tracksList.querySelectorAll("tr");

          rows.forEach((row) => {
            const text = row.textContent.toLowerCase();
            row.style.display = text.includes(query) ? "" : "none";
          });
        }

        // Scanner la bibliothèque
        async function scanLibrary() {
          try {
            toggleLoading(true);

            const response = await fetch("/api/scan", {
              method: "POST",
            });

            const data = await response.json();

            if (data.success) {
              currentState.library = {
                scanned: true,
                ...data.stats,
              };

              // Récupérer les genres et artistes pour les templates
              await fetchGenresAndArtists();

              updateStats();

              // Permettre la génération de playlists
              generatePlaylistsBtn.classList.remove("disabled");

              alert("Bibliothèque scannée avec succès !");
            } else {
              alert(`Erreur lors du scan: ${data.error}`);
            }
          } catch (error) {
            console.error("Error scanning library:", error);
            alert("Erreur lors du scan de la bibliothèque");
          } finally {
            toggleLoading(false);
          }
        }

        // Récupérer les genres et artistes
        async function fetchGenresAndArtists() {
          try {
            const [genresResponse, artistsResponse] = await Promise.all([
              fetch("/api/genres"),
              fetch("/api/artists"),
            ]);

            const genresData = await genresResponse.json();
            const artistsData = await artistsResponse.json();

            currentState.genres = genresData.genres;
            currentState.artists = artistsData.artists;
          } catch (error) {
            console.error("Error fetching genres and artists:", error);
          }
        }

        // Générer les playlists
        async function generatePlaylists() {
          if (!currentState.library.scanned) {
            alert("Veuillez d'abord scanner votre bibliothèque");
            return;
          }

          try {
            toggleLoading(true);

            // Récupérer les options
            const formData = new FormData(optionsForm);
            const options = {};
            const generators = {};

            for (const [key, value] of formData.entries()) {
              if (key.startsWith("generators.")) {
                const generatorName = key.split(".")[1];
                generators[generatorName] = true;
              } else if (key.startsWith("similarityFactors.")) {
                const factorName = key.split(".")[1];
                if (!options.similarityFactors) {
                  options.similarityFactors = {};
                }
                options.similarityFactors[factorName] = parseFloat(value);
              } else {
                if (!isNaN(value) && value !== "") {
                  options[key] = parseInt(value);
                } else {
                  options[key] = value;
                }
              }
            }

            // Désactiver les générateurs non cochés
            for (const generatorName of Object.keys(generators)) {
              if (!formData.has(`generators.${generatorName}`)) {
                generators[generatorName] = false;
              }
            }

            const response = await fetch("/api/generate", {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify({
                options,
                generators,
              }),
            });

            const data = await response.json();

            if (data.success) {
              currentState.playlists = data.playlists;
              updatePlaylistsList();

              // Activer les boutons de sauvegarde
              savePlaylistsBtn.classList.remove("disabled");

              // Afficher la première playlist
              if (currentState.playlists.length > 0) {
                loadPlaylist(0);
              }

              alert("Playlists générées avec succès !");
            } else {
              alert(`Erreur lors de la génération: ${data.error}`);
            }
          } catch (error) {
            console.error("Error generating playlists:", error);
            alert("Erreur lors de la génération des playlists");
          } finally {
            toggleLoading(false);
          }
        }

        // Sauvegarder les playlists
        async function savePlaylists() {
          if (currentState.playlists.length === 0) {
            alert("Aucune playlist à sauvegarder");
            return;
          }

          try {
            toggleLoading(true);

            const response = await fetch("/api/save", {
              method: "POST",
            });

            const data = await response.json();

            if (data.success) {
              alert(`Playlists sauvegardées avec succès dans ${data.path}`);
            } else {
              alert(`Erreur lors de la sauvegarde: ${data.error}`);
            }
          } catch (error) {
            console.error("Error saving playlists:", error);
            alert("Erreur lors de la sauvegarde des playlists");
          } finally {
            toggleLoading(false);
          }
        }

        // Charger les playlists
        async function loadPlaylists() {
          try {
            toggleLoading(true);

            const response = await fetch("/api/load", {
              method: "POST",
            });

            const data = await response.json();

            if (data.success) {
              // Récupérer la liste des playlists
              const playlistsResponse = await fetch("/api/playlists");
              const playlistsData = await playlistsResponse.json();

              currentState.playlists = playlistsData.playlists;
              updatePlaylistsList();

              // Activer les boutons de sauvegarde
              savePlaylistsBtn.classList.remove("disabled");

              // Afficher la première playlist
              if (currentState.playlists.length > 0) {
                loadPlaylist(0);
              }

              alert(`${data.playlistCount} playlists chargées avec succès !`);
            } else {
              alert(`Erreur lors du chargement: ${data.error}`);
            }
          } catch (error) {
            console.error("Error loading playlists:", error);
            alert("Erreur lors du chargement des playlists");
          } finally {
            toggleLoading(false);
          }
        }

        // Charger les options
        async function loadOptions() {
          try {
            const response = await fetch("/api/options");
            const data = await response.json();

            if (data.success) {
              // Mettre à jour les champs du formulaire avec les options
              const options = data.options;
              const generators = data.generators;

              // Mettre à jour les champs numériques
              for (const key of [
                "minTracksPerPlaylist",
                "maxTracksPerPlaylist",
                "maxTracksPerArtistInPlaylist",
                "numberOfPlaylists",
              ]) {
                if (options[key] !== undefined) {
                  optionsForm.querySelector(`[name="${key}"]`).value =
                    options[key];
                }
              }

              // Mettre à jour les facteurs de similarité
              if (options.similarityFactors) {
                for (const [key, value] of Object.entries(
                  options.similarityFactors
                )) {
                  const input = optionsForm.querySelector(
                    `[name="similarityFactors.${key}"]`
                  );
                  if (input) {
                    input.value = value;
                  }
                }
              }

              // Mettre à jour les générateurs
              for (const [name, enabled] of Object.entries(generators)) {
                const checkbox = optionsForm.querySelector(
                  `[name="generators.${name}"]`
                );
                if (checkbox) {
                  checkbox.checked = enabled;
                }
              }
            }
          } catch (error) {
            console.error("Error loading options:", error);
          }
        }

        // Ajouter un champ de règle
        function addRuleField() {
          const ruleId = Date.now(); // Identifiant unique pour la règle
          const ruleElement = document.createElement("div");
          ruleElement.className = "template-item";
          ruleElement.dataset.ruleId = ruleId;

          ruleElement.innerHTML = `
          <div class="d-flex justify-content-between align-items-center mb-2">
            <strong>Règle</strong>
            <button type="button" class="btn btn-sm btn-outline-danger" data-rule-id="${ruleId}">
              <i class="bi bi-trash"></i>
            </button>
          </div>
          <div class="row mb-2">
            <div class="col-md-4">
              <select class="form-select rule-type" data-rule-id="${ruleId}">
                <option value="genre">Genre</option>
                <option value="artist">Artiste</option>
                <option value="year">Année</option>
                <option value="folder">Dossier</option>
              </select>
            </div>
            <div class="col-md-3 operator-container" data-rule-id="${ruleId}" style="display: none;">
              <select class="form-select rule-operator">
                <option value="=">=</option>
                <option value="<">&lt;</option>
                <option value=">">&gt;</option>
                <option value="between">Entre</option>
              </select>
            </div>
            <div class="col-md-5 value-container" data-rule-id="${ruleId}">
              <select class="form-select rule-value">
                <option value="">Sélectionnez un genre</option>
                ${currentState.genres
                  .map((genre) => `<option value="${genre}">${genre}</option>`)
                  .join("")}
              </select>
            </div>
          </div>
        `;

          rulesList.appendChild(ruleElement);

          // Gérer le changement de type de règle
          const typeSelect = ruleElement.querySelector(".rule-type");
          typeSelect.addEventListener("change", () => {
            updateRuleFields(ruleId, typeSelect.value);
          });

          // Gérer la suppression de la règle
          const deleteButton = ruleElement.querySelector(
            "button[data-rule-id]"
          );
          deleteButton.addEventListener("click", () => {
            ruleElement.remove();
          });

          return ruleId;
        }

        // Mettre à jour les champs de règle en fonction du type
        function updateRuleFields(ruleId, type) {
          const operatorContainer = document.querySelector(
            `.operator-container[data-rule-id="${ruleId}"]`
          );
          const valueContainer = document.querySelector(
            `.value-container[data-rule-id="${ruleId}"]`
          );

          // Réinitialiser les conteneurs
          operatorContainer.style.display = "none";
          valueContainer.innerHTML = "";

          switch (type) {
            case "genre":
              valueContainer.innerHTML = `
              <select class="form-select rule-value">
                <option value="">Sélectionnez un genre</option>
                ${currentState.genres
                  .map((genre) => `<option value="${genre}">${genre}</option>`)
                  .join("")}
              </select>
            `;
              break;
            case "artist":
              valueContainer.innerHTML = `
              <select class="form-select rule-value">
                <option value="">Sélectionnez un artiste</option>
                ${currentState.artists
                  .map(
                    (artist) => `<option value="${artist}">${artist}</option>`
                  )
                  .join("")}
              </select>
            `;
              break;
            case "year":
              operatorContainer.style.display = "block";
              valueContainer.innerHTML = `<input type="number" class="form-control rule-value" min="1900" max="2100">`;

              // Gérer le changement d'opérateur
              const operatorSelect =
                operatorContainer.querySelector(".rule-operator");
              operatorSelect.addEventListener("change", () => {
                if (operatorSelect.value === "between") {
                  valueContainer.innerHTML = `
                  <div class="input-group">
                    <input type="number" class="form-control rule-value-min" min="1900" max="2100" placeholder="Min">
                    <span class="input-group-text">-</span>
                    <input type="number" class="form-control rule-value-max" min="1900" max="2100" placeholder="Max">
                  </div>
                `;
                } else {
                  valueContainer.innerHTML = `<input type="number" class="form-control rule-value" min="1900" max="2100">`;
                }
              });
              break;
            case "folder":
              valueContainer.innerHTML = `<input type="text" class="form-control rule-value" placeholder="Nom du dossier">`;
              break;
          }
        }

        // Collecter les règles du formulaire
        function collectRules() {
          const rules = [];
          const ruleElements = rulesList.querySelectorAll(".template-item");

          for (const element of ruleElements) {
            const ruleId = element.dataset.ruleId;
            const type = element.querySelector(".rule-type").value;
            let rule = { type };

            switch (type) {
              case "genre":
              case "artist":
              case "folder":
                rule.value = element.querySelector(".rule-value").value;
                break;
              case "year":
                const operator = element.querySelector(".rule-operator").value;
                rule.operator = operator;

                if (operator === "between") {
                  const min = parseInt(
                    element.querySelector(".rule-value-min").value
                  );
                  const max = parseInt(
                    element.querySelector(".rule-value-max").value
                  );
                  rule.value = [min, max];
                } else {
                  rule.value = parseInt(
                    element.querySelector(".rule-value").value
                  );
                }
                break;
            }

            if (
              rule.value !== undefined &&
              rule.value !== "" &&
              !isNaN(rule.value)
            ) {
              rules.push(rule);
            }
          }

          return rules;
        }

        // Sauvegarder un modèle de playlist
        async function saveTemplate() {
          const name = templateForm.querySelector('[name="name"]').value;
          const description = templateForm.querySelector(
            '[name="description"]'
          ).value;

          if (!name) {
            alert("Le nom de la playlist est obligatoire");
            return;
          }

          const rules = collectRules();

          if (rules.length === 0) {
            alert("Vous devez ajouter au moins une règle");
            return;
          }

          try {
            toggleLoading(true);

            const response = await fetch("/api/generate", {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify({
                templates: [
                  {
                    name,
                    description,
                    rules,
                  },
                ],
              }),
            });

            const data = await response.json();

            if (data.success) {
              // Fermer le modal
              const modal = bootstrap.Modal.getInstance(
                document.getElementById("templateModal")
              );
              modal.hide();

              // Mettre à jour la liste des playlists
              currentState.playlists = data.playlists;
              updatePlaylistsList();

              // Réinitialiser le formulaire
              templateForm.reset();
              rulesList.innerHTML = "";

              alert("Playlist personnalisée créée avec succès !");
            } else {
              alert(`Erreur lors de la création: ${data.error}`);
            }
          } catch (error) {
            console.error("Error creating template:", error);
            alert("Erreur lors de la création du modèle");
          } finally {
            toggleLoading(false);
          }
        }

        // Modifier une playlist
        async function modifyPlaylist() {
          if (currentState.currentPlaylistIndex < 0) return;

          const name = editPlaylistName.value;
          const description = editPlaylistDescription.value;

          if (!name) {
            alert("Le nom de la playlist est obligatoire");
            return;
          }

          try {
            toggleLoading(true);

            const response = await fetch(
              `/api/playlists/${currentState.currentPlaylistIndex}`,
              {
                method: "PUT",
                headers: {
                  "Content-Type": "application/json",
                },
                body: JSON.stringify({
                  name,
                  description,
                }),
              }
            );

            const data = await response.json();

            if (data.success) {
              // Fermer le modal
              const modal = bootstrap.Modal.getInstance(
                document.getElementById("editPlaylistModal")
              );
              modal.hide();

              // Mettre à jour la playlist actuelle
              currentState.playlists[currentState.currentPlaylistIndex].name =
                name;
              if (description) {
                currentState.playlists[
                  currentState.currentPlaylistIndex
                ].description = description;
              }

              updatePlaylistsList();

              // Mettre à jour l'affichage
              playlistTitle.textContent = name;
              playlistDescription.textContent = description || "";

              alert("Playlist mise à jour avec succès !");
            } else {
              alert(`Erreur lors de la mise à jour: ${data.error}`);
            }
          } catch (error) {
            console.error("Error updating playlist:", error);
            alert("Erreur lors de la mise à jour de la playlist");
          } finally {
            toggleLoading(false);
          }
        }

        // Supprimer une playlist
        function removePlaylist() {
          if (currentState.currentPlaylistIndex < 0) return;

          if (!confirm("Êtes-vous sûr de vouloir supprimer cette playlist ?")) {
            return;
          }

          // Supprimer la playlist de la liste
          currentState.playlists.splice(currentState.currentPlaylistIndex, 1);

          // Mettre à jour l'interface
          updatePlaylistsList();

          if (currentState.playlists.length > 0) {
            // Sélectionner la première playlist
            loadPlaylist(0);
          } else {
            // Aucune playlist, afficher le message de bienvenue
            welcomeMessage.style.display = "block";
            playlistContent.style.display = "none";
            currentState.currentPlaylistIndex = -1;
          }
        }

        // Initialisation
        function init() {
          // Charger les options
          loadOptions();

          // Événements des boutons
          scanLibraryBtn.addEventListener("click", scanLibrary);
          generatePlaylistsBtn.addEventListener("click", generatePlaylists);
          savePlaylistsBtn.addEventListener("click", savePlaylists);
          loadPlaylistsBtn.addEventListener("click", loadPlaylists);
          saveOptionsBtn.addEventListener("click", () => {
            // Fermer le modal
            const modal = bootstrap.Modal.getInstance(
              document.getElementById("optionsModal")
            );
            modal.hide();

            alert(
              "Options mises à jour, elles seront appliquées à la prochaine génération."
            );
          });

          // Événements pour les modèles
          addRuleBtn.addEventListener("click", addRuleField);
          saveTemplateBtn.addEventListener("click", saveTemplate);

          // Événements pour l'édition de playlist
          editPlaylistBtn.addEventListener("click", () => {
            if (currentState.currentPlaylistIndex < 0) return;

            const playlist =
              currentState.playlists[currentState.currentPlaylistIndex];
            editPlaylistName.value = playlist.name;
            editPlaylistDescription.value = playlist.description || "";

            const modal = new bootstrap.Modal(
              document.getElementById("editPlaylistModal")
            );
            modal.show();
          });

          savePlaylistEditBtn.addEventListener("click", modifyPlaylist);
          removePlaylistBtn.addEventListener("click", removePlaylist);

          // Recherche de pistes
          trackSearch.addEventListener("input", filterTracks);

          // Désactiver les boutons tant que la bibliothèque n'est pas scannée
          generatePlaylistsBtn.classList.add("disabled");
          savePlaylistsBtn.classList.add("disabled");

          // Afficher le message de bienvenue au démarrage
          welcomeMessage.style.display = "block";
          playlistContent.style.display = "none";

          updateStats();
        }

        // Initialiser l'application
        init();
      });
    </script>
  </body>
</html>
